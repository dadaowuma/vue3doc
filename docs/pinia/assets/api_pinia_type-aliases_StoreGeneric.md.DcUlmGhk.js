import{_ as t,c as a,a2 as r,o}from"./chunks/framework.DoMDgatr.js";const f=JSON.parse('{"title":"Type Alias: StoreGeneric","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/type-aliases/StoreGeneric.md","filePath":"api/pinia/type-aliases/StoreGeneric.md"}'),i={name:"api/pinia/type-aliases/StoreGeneric.md"};function n(s,e,c,p,l,d){return o(),a("div",null,e[0]||(e[0]=[r('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / StoreGeneric</p><h1 id="Type-Alias-StoreGeneric" tabindex="-1">Type Alias: StoreGeneric <a class="header-anchor" href="#Type-Alias-StoreGeneric" aria-label="Permalink to &quot;Type Alias: StoreGeneric&quot;">​</a></h1><blockquote><p><strong>StoreGeneric</strong>: <a href="./Store.html"><code>Store</code></a>&lt;<code>string</code>, <a href="./StateTree.html"><code>StateTree</code></a>, <a href="./GettersTree.html"><code>_GettersTree</code></a>&lt;<a href="./StateTree.html"><code>StateTree</code></a>&gt;, <a href="./ActionsTree.html"><code>_ActionsTree</code></a>&gt;</p></blockquote><p>Generic and type-unsafe version of Store. Doesn&#39;t fail on access with strings, making it much easier to write generic functions that do not care about the kind of store that is passed.</p>',6)]))}const S=t(i,[["render",n]]);export{f as __pageData,S as default};
