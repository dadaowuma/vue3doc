import{_ as a,c as e,a2 as i,o as t}from"./chunks/framework.DoMDgatr.js";const c=JSON.parse('{"title":"Function: mapState()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/functions/mapState.md","filePath":"api/pinia/functions/mapState.md"}'),n={name:"api/pinia/functions/mapState.md"};function p(h,s,r,o,l,d){return t(),e("div",null,s[0]||(s[0]=[i(`<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / mapState</p><h1 id="Function-mapState-" tabindex="-1">Function: mapState() <a class="header-anchor" href="#Function-mapState-" aria-label="Permalink to &quot;Function: mapState()&quot;">​</a></h1><p>Allows using state and getters from one store without using the composition API (<code>setup()</code>) by generating an object to be spread in the <code>computed</code> field of a component.</p><h2 id="Param" tabindex="-1">Param <a class="header-anchor" href="#Param" aria-label="Permalink to &quot;Param&quot;">​</a></h2><p>store to map from</p><h2 id="Param-1" tabindex="-1">Param <a class="header-anchor" href="#Param-1" aria-label="Permalink to &quot;Param&quot;">​</a></h2><p>array or object</p><h2 id="mapState-useStore-keyMapper-" tabindex="-1">mapState(useStore, keyMapper) <a class="header-anchor" href="#mapState-useStore-keyMapper-" aria-label="Permalink to &quot;mapState(useStore, keyMapper)&quot;">​</a></h2><blockquote><p><strong>mapState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;(<code>useStore</code>, <code>keyMapper</code>): <a href="./../type-aliases/MapStateObjectReturn.html"><code>_MapStateObjectReturn</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;</p></blockquote><p>Allows using state and getters from one store without using the composition API (<code>setup()</code>) by generating an object to be spread in the <code>computed</code> field of a component. The values of the object are the state properties/getters while the keys are the names of the resulting computed properties. Optionally, you can also pass a custom function that will receive the store as its first argument. Note that while it has access to the component instance via <code>this</code>, it won&#39;t be typed.</p><h3 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong> <em>extends</em> <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<code>S</code>&gt; | <code>object</code></p><p>• <strong>A</strong></p><p>• <strong>KeyMapper</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, keyof <code>S</code> | keyof <code>G</code> | (<code>store</code>) =&gt; <code>any</code>&gt;</p><h3 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>useStore</strong>: <a href="./../interfaces/StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>store to map from</p><p>• <strong>keyMapper</strong>: <code>KeyMapper</code></p><p>object of state properties or getters</p><h3 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../type-aliases/MapStateObjectReturn.html"><code>_MapStateObjectReturn</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;</p><h3 id="Param-2" tabindex="-1">Param <a class="header-anchor" href="#Param-2" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>store to map from</p><h3 id="Param-3" tabindex="-1">Param <a class="header-anchor" href="#Param-3" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>array or object</p><h3 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  computed</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // other computed properties</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // useCounterStore has a state property named \`count\` and a getter \`double\`</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">    ...</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">mapState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">useCounterStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">      n</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;"> &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">count</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">      triple</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;"> store</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">n</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;"> *</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;"> 3</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">      // note we can&#39;t use an arrow function if we want to use \`this\`</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">      custom</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">        return</span><span style="--shiki-dark:#BF9EEE;--shiki-dark-font-style:italic;--shiki-light:#A65E2B;--shiki-light-font-style:inherit;"> this</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">someComponentValue</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;"> +</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">n</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">      },</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">      doubleN</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;"> &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">double</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">    })</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  created</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">()</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#BF9EEE;--shiki-dark-font-style:italic;--shiki-light:#A65E2B;--shiki-light-font-style:inherit;">    this</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">n</span><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"> // 2</span></span>
<span class="line"><span style="--shiki-dark:#BF9EEE;--shiki-dark-font-style:italic;--shiki-light:#A65E2B;--shiki-light-font-style:inherit;">    this</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">doubleN</span><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"> // 4</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div><h2 id="mapState-useStore-keys-" tabindex="-1">mapState(useStore, keys) <a class="header-anchor" href="#mapState-useStore-keys-" aria-label="Permalink to &quot;mapState(useStore, keys)&quot;">​</a></h2><blockquote><p><strong>mapState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>Keys</code>&gt;(<code>useStore</code>, <code>keys</code>): <a href="./../type-aliases/MapStateReturn.html"><code>_MapStateReturn</code></a>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;</p></blockquote><p>Allows using state and getters from one store without using the composition API (<code>setup()</code>) by generating an object to be spread in the <code>computed</code> field of a component.</p><h3 id="Type-Parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong> <em>extends</em> <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<code>S</code>&gt; | <code>object</code></p><p>• <strong>A</strong></p><p>• <strong>Keys</strong> <em>extends</em> <code>string</code> | <code>number</code> | <code>symbol</code></p><h3 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>useStore</strong>: <a href="./../interfaces/StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>store to map from</p><p>• <strong>keys</strong>: readonly <code>Keys</code>[]</p><p>array of state properties or getters</p><h3 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../type-aliases/MapStateReturn.html"><code>_MapStateReturn</code></a>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;</p><h3 id="Param-4" tabindex="-1">Param <a class="header-anchor" href="#Param-4" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>store to map from</p><h3 id="Param-5" tabindex="-1">Param <a class="header-anchor" href="#Param-5" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>array or object</p><h3 id="Example-1" tabindex="-1">Example <a class="header-anchor" href="#Example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#F286C4;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">  computed</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // other computed properties</span></span>
<span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">    ...</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">mapState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">useCounterStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> [</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">count</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;"> &#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">double</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">])</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  created</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">()</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#BF9EEE;--shiki-dark-font-style:italic;--shiki-light:#A65E2B;--shiki-light-font-style:inherit;">    this</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">count</span><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"> // 2</span></span>
<span class="line"><span style="--shiki-dark:#BF9EEE;--shiki-dark-font-style:italic;--shiki-light:#A65E2B;--shiki-light-font-style:inherit;">    this</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">double</span><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"> // 4</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">}</span></span></code></pre></div>`,53)]))}const F=a(n,[["render",p]]);export{c as __pageData,F as default};
