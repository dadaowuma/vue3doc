import{_ as t,c as o,a2 as n,o as r}from"./chunks/framework.DoMDgatr.js";const h=JSON.parse('{"title":"Type Alias: StoreOnActionListenerContext<Id, S, G, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/type-aliases/StoreOnActionListenerContext.md","filePath":"api/pinia/type-aliases/StoreOnActionListenerContext.md"}'),a={name:"api/pinia/type-aliases/StoreOnActionListenerContext.md"};function s(i,e,c,d,p,l){return r(),o("div",null,e[0]||(e[0]=[n('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / StoreOnActionListenerContext</p><h1 id="Type-Alias-StoreOnActionListenerContext-Id-S-G-A-" tabindex="-1">Type Alias: StoreOnActionListenerContext&lt;Id, S, G, A&gt; <a class="header-anchor" href="#Type-Alias-StoreOnActionListenerContext-Id-S-G-A-" aria-label="Permalink to &quot;Type Alias: StoreOnActionListenerContext\\&lt;Id, S, G, A\\&gt;&quot;">​</a></h1><blockquote><p><strong>StoreOnActionListenerContext</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;: <a href="./ActionsTree.html"><code>_ActionsTree</code></a> <em>extends</em> <code>A</code> ? <a href="./../interfaces/StoreOnActionListenerContext.html"><code>_StoreOnActionListenerContext</code></a>&lt;<a href="./StoreGeneric.html"><code>StoreGeneric</code></a>, <code>string</code>, <a href="./ActionsTree.html"><code>_ActionsTree</code></a>&gt; : <code>{ [Name in keyof A]: Name extends string ? _StoreOnActionListenerContext&lt;Store&lt;Id, S, G, A&gt;, Name, A&gt; : never }</code>[keyof <code>A</code>]</p></blockquote><p>Context object passed to callbacks of <code>store.$onAction(context =&gt; {})</code> TODO: should have only the Id, the Store and Actions to generate the proper object</p><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong></p><p>• <strong>A</strong></p>',11)]))}const m=t(a,[["render",s]]);export{h as __pageData,m as default};
