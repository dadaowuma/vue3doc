import{_ as t,c as a,a2 as s,o as i}from"./chunks/framework.DoMDgatr.js";const k=JSON.parse('{"title":"Interface: DefineStoreOptionsInPlugin<Id, S, G, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/interfaces/DefineStoreOptionsInPlugin.md","filePath":"api/pinia/interfaces/DefineStoreOptionsInPlugin.md"}'),n={name:"api/pinia/interfaces/DefineStoreOptionsInPlugin.md"};function o(r,e,h,l,d,p){return i(),a("div",null,e[0]||(e[0]=[s(`<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / DefineStoreOptionsInPlugin</p><h1 id="Interface-DefineStoreOptionsInPlugin-Id-S-G-A-" tabindex="-1">Interface: DefineStoreOptionsInPlugin&lt;Id, S, G, A&gt; <a class="header-anchor" href="#Interface-DefineStoreOptionsInPlugin-Id-S-G-A-" aria-label="Permalink to &quot;Interface: DefineStoreOptionsInPlugin\\&lt;Id, S, G, A\\&gt;&quot;">​</a></h1><p>Available <code>options</code> when creating a pinia plugin.</p><h2 id="Extends" tabindex="-1">Extends <a class="header-anchor" href="#Extends" aria-label="Permalink to &quot;Extends&quot;">​</a></h2><ul><li><code>Omit</code>&lt;<a href="./DefineStoreOptions.html"><code>DefineStoreOptions</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;, <code>&quot;id&quot;</code> | <code>&quot;actions&quot;</code>&gt;</li></ul><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong></p><p>• <strong>A</strong></p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="actions" tabindex="-1">actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;actions&quot;">​</a></h3><blockquote><p><strong>actions</strong>: <code>A</code></p></blockquote><p>Extracted object of actions. Added by useStore() when the store is built using the setup API, otherwise uses the one passed to <code>defineStore()</code>. Defaults to an empty object if no actions are defined.</p><hr><h3 id="getters-" tabindex="-1">getters? <a class="header-anchor" href="#getters-" aria-label="Permalink to &quot;getters?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>getters</strong>: <code>G</code> &amp; <code>ThisType</code>&lt;<code>UnwrapRef</code>&lt;<code>S</code>&gt; &amp; <a href="./../type-aliases/StoreWithGetters.html"><code>_StoreWithGetters</code></a>&lt;<code>G</code>&gt; &amp; <a href="./PiniaCustomProperties.html"><code>PiniaCustomProperties</code></a>&lt;<code>string</code>, <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a>, <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<a href="./../type-aliases/StateTree.html"><code>StateTree</code></a>&gt;, <a href="./../type-aliases/ActionsTree.html"><code>_ActionsTree</code></a>&gt;&gt; &amp; <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</p></blockquote><p>Optional object of getters.</p><h4 id="Inherited-from" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>Omit.getters</code></p><hr><h3 id="state-" tabindex="-1">state()? <a class="header-anchor" href="#state-" aria-label="Permalink to &quot;state()?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>state</strong>: () =&gt; <code>S</code></p></blockquote><p>Function to create a fresh state. <strong>Must be an arrow function</strong> to ensure correct typings!</p><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>S</code></p><h4 id="Inherited-from-1" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-1" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>Omit.state</code></p><h2 id="Methods" tabindex="-1">Methods <a class="header-anchor" href="#Methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="hydrate-" tabindex="-1">hydrate()? <a class="header-anchor" href="#hydrate-" aria-label="Permalink to &quot;hydrate()?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>hydrate</strong>(<code>storeState</code>, <code>initialState</code>): <code>void</code></p></blockquote><p>Allows hydrating the store during SSR when complex state (like client side only refs) are used in the store definition and copying the value from <code>pinia.state</code> isn&#39;t enough.</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>storeState</strong>: <code>UnwrapRef</code>&lt;<code>S</code>&gt;</p><p>the current state in the store</p><p>• <strong>initialState</strong>: <code>UnwrapRef</code>&lt;<code>S</code>&gt;</p><p>initialState</p><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>If in your <code>state</code>, you use any <code>customRef</code>s, any <code>computed</code>s, or any <code>ref</code>s that have a different value on Server and Client, you need to manually hydrate them. e.g., a custom ref that is stored in the local storage:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">const</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> useStore</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> defineStore</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">main</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  state</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> () </span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">=&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#998418;">    n</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useLocalStorage</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">key</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">0</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  }),</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">  hydrate</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">storeState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">initialState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">    // @ts-expect-error: https://github.com/microsoft/TypeScript/issues/43826</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">    storeState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">n</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> useLocalStorage</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#E7EE98;--shiki-light:#B56959;">key</span><span style="--shiki-dark:#DEE492;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">, </span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">0</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">})</span></span></code></pre></div><h4 id="Inherited-from-2" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-2" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>Omit.hydrate</code></p>`,46)]))}const g=t(n,[["render",o]]);export{k as __pageData,g as default};
