import{_ as i,c as a,$ as t,o as e}from"./chunks/framework.BVElzs7h.js";const c=JSON.parse('{"title":"API 参考","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"zh/api/index.md","filePath":"zh/api/index.md"}'),n={name:"zh/api/index.md"};function l(p,s,h,k,r,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h1><h2 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h2><h3 id="createstore" tabindex="-1">createStore <a class="header-anchor" href="#createstore" aria-label="Permalink to &quot;createStore&quot;">​</a></h3><ul><li><p><code>createStore&lt;S&gt;(options: StoreOptions&lt;S&gt;): Store&lt;S&gt;</code></p><p>创建一个 store 实例。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options })</span></span></code></pre></div></li></ul><h2 id="store-构造器选项" tabindex="-1">Store 构造器选项 <a class="header-anchor" href="#store-构造器选项" aria-label="Permalink to &quot;Store 构造器选项&quot;">​</a></h2><h3 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h3><ul><li><p>类型: <code>Object | Function</code></p><p>Vuex store 实例的根 state 对象。<a href="./../guide/state.html">详细介绍</a></p><p>如果你传入返回一个对象的函数，其返回的对象会被用作根 state。这在你想要重用 state 对象，尤其是对于重用 module 来说非常有用。<a href="./../guide/modules.html#模块重用">详细介绍</a></p></li></ul><h3 id="mutations" tabindex="-1">mutations <a class="header-anchor" href="#mutations" aria-label="Permalink to &quot;mutations&quot;">​</a></h3><ul><li><p>类型: <code>{ [type: string]: Function }</code></p><p>在 store 上注册 mutation，处理函数总是接受 <code>state</code> 作为第一个参数（如果定义在模块中，则为模块的局部状态），<code>payload</code> 作为第二个参数（可选）。</p><p><a href="./../guide/mutations.html">详细介绍</a></p></li></ul><h3 id="actions" tabindex="-1">actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;actions&quot;">​</a></h3><ul><li><p>类型: <code>{ [type: string]: Function }</code></p><p>在 store 上注册 action。处理函数总是接受 <code>context</code> 作为第一个参数，<code>context</code> 对象包含以下属性：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于 \`store.state\`，若在模块中则为局部状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rootState,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于 \`store.state\`，只存在于模块中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  commit,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于 \`store.commit\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dispatch,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于 \`store.dispatch\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于 \`store.getters\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rootGetters </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于 \`store.getters\`，只存在于模块中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同时如果有第二个参数 <code>payload</code> 的话也能够接收。</p><p><a href="./../guide/actions.html">详细介绍</a></p></li></ul><h3 id="getters" tabindex="-1">getters <a class="header-anchor" href="#getters" aria-label="Permalink to &quot;getters&quot;">​</a></h3><ul><li>类型: <code>{ [key: string]: Function }</code></li></ul><p>在 store 上注册 getter，getter 方法接受以下参数：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>state,     // 如果在模块中定义则为模块的局部状态</span></span>
<span class="line"><span>getters    // 等同于 store.getters</span></span></code></pre></div><p>当定义在一个模块里时会特别一些：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>state,       // 如果在模块中定义则为模块的局部状态</span></span>
<span class="line"><span>getters,     // 当前模块的局部 getters</span></span>
<span class="line"><span>rootState,   // 全局 state</span></span>
<span class="line"><span>rootGetters  // 所有 getters</span></span></code></pre></div><p>注册的 getter 暴露为 <code>store.getters</code>。</p><p><a href="./../guide/getters.html">详细介绍</a></p><h3 id="modules" tabindex="-1">modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;modules&quot;">​</a></h3><ul><li><p>类型: <code>Object</code></p><p>包含了子模块的对象，会被合并到 store，大概长这样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    namespaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mutations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    getters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>与根模块的选项一样，每个模块也包含 <code>state</code> 和 <code>mutations</code> 选项。模块的状态使用 key 关联到 store 的根状态。模块的 mutation 和 getter 只会接收 module 的局部状态作为第一个参数，而不是根状态，并且模块 action 的 <code>context.state</code> 同样指向局部状态。</p><p><a href="./../guide/modules.html">详细介绍</a></p></li></ul><h3 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h3><ul><li><p>类型: <code>Array&lt;Function&gt;</code></p><p>一个数组，包含应用在 store 上的插件方法。这些插件直接接收 store 作为唯一参数，可以监听 mutation（用于外部地数据持久化、记录或调试）或者提交 mutation （用于内部数据，例如 websocket 或 某些观察者）</p><p><a href="./../guide/plugins.html">详细介绍</a></p></li></ul><h3 id="strict" tabindex="-1">strict <a class="header-anchor" href="#strict" aria-label="Permalink to &quot;strict&quot;">​</a></h3><ul><li><p>类型: <code>boolean</code></p></li><li><p>默认值: <code>false</code></p><p>使 Vuex store 进入严格模式，在严格模式下，任何 mutation 处理函数以外修改 Vuex state 都会抛出错误。</p><p><a href="./../guide/strict.html">详细介绍</a></p></li></ul><h3 id="devtools" tabindex="-1">devtools <a class="header-anchor" href="#devtools" aria-label="Permalink to &quot;devtools&quot;">​</a></h3><ul><li><p>类型：<code>boolean</code></p><p>为某个特定的 Vuex 实例打开或关闭 devtools。对于传入 <code>false</code> 的实例来说 Vuex store 不会订阅到 devtools 插件。对于一个页面中有多个 store 的情况非常有用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  devtools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="store-实例属性" tabindex="-1">Store 实例属性 <a class="header-anchor" href="#store-实例属性" aria-label="Permalink to &quot;Store 实例属性&quot;">​</a></h2><h3 id="state-1" tabindex="-1">state <a class="header-anchor" href="#state-1" aria-label="Permalink to &quot;state&quot;">​</a></h3><ul><li><p>类型: <code>Object</code></p><p>根状态，只读。</p></li></ul><h3 id="getters-1" tabindex="-1">getters <a class="header-anchor" href="#getters-1" aria-label="Permalink to &quot;getters&quot;">​</a></h3><ul><li><p>类型: <code>Object</code></p><p>暴露出注册的 getter，只读。</p></li></ul><h2 id="store-实例方法" tabindex="-1">Store 实例方法 <a class="header-anchor" href="#store-实例方法" aria-label="Permalink to &quot;Store 实例方法&quot;">​</a></h2><h3 id="commit" tabindex="-1">commit <a class="header-anchor" href="#commit" aria-label="Permalink to &quot;commit&quot;">​</a></h3><ul><li><code>commit(type: string, payload?: any, options?: Object)</code></li><li><code>commit(mutation: Object, options?: Object)</code></li></ul><p>提交 mutation。<code>options</code> 里可以有 <code>root: true</code>，它允许在<a href="./../guide/modules.html#命名空间">命名空间模块</a>里提交根的 mutation。<a href="./../guide/mutations.html">详细介绍</a></p><h3 id="dispatch" tabindex="-1">dispatch <a class="header-anchor" href="#dispatch" aria-label="Permalink to &quot;dispatch&quot;">​</a></h3><ul><li><code>dispatch(type: string, payload?: any, options?: Object): Promise&lt;any&gt;</code></li><li><code>dispatch(action: Object, options?: Object): Promise&lt;any&gt;</code></li></ul><p>分发 action。<code>options</code> 里可以有 <code>root: true</code>，它允许在<a href="./../guide/modules.html#命名空间">命名空间模块</a>里分发根的 action。返回一个解析所有被触发的 action 处理器的 Promise。<a href="./../guide/actions.html">详细介绍</a></p><h3 id="replacestate" tabindex="-1">replaceState <a class="header-anchor" href="#replacestate" aria-label="Permalink to &quot;replaceState&quot;">​</a></h3><ul><li><code>replaceState(state: Object)</code></li></ul><p>替换 store 的根状态，仅用状态合并或时光旅行调试。</p><h3 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h3><ul><li><code>watch(fn: Function, callback: Function, options?: Object): Function</code></li></ul><p>响应式地侦听 <code>fn</code> 的返回值，当值改变时调用回调函数。<code>fn</code> 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 <a href="https://cn.vuejs.org/v2/api/#vm-watch" target="_blank" rel="noreferrer"><code>vm.$watch</code></a> 方法的参数。</p><p>要停止侦听，调用此方法返回的函数即可停止侦听。</p><h3 id="subscribe" tabindex="-1">subscribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;subscribe&quot;">​</a></h3><ul><li><code>subscribe(handler: Function, options?: Object): Function</code></li></ul><p>订阅 store 的 mutation。<code>handler</code> 会在每个 mutation 完成后调用，接收 mutation 和经过 mutation 后的状态作为参数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unsubscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mutation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mutation.type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mutation.payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你可以调用 unsubscribe 来停止订阅。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>默认情况下，新的处理函数会被添加到其链的尾端，因此它会在其它之前已经被添加了的处理函数之后执行。这一行为可以通过向 <code>options</code> 添加 <code>prepend: true</code> 来覆写，即把处理函数添加到其链的最开始。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler, { prepend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p><code>subscribe</code> 方法将返回一个 <code>unsubscribe</code> 函数，当不再需要订阅时应该调用该函数。例如，你可能会订阅一个 Vuex 模块，当你取消注册该模块时取消订阅。或者你可能从一个 Vue 组件内部调用 <code>subscribe</code>，然后不久就会销毁该组件。在这些情况下，你应该记得手动取消订阅。</p><p>通常用于插件。<a href="./../guide/plugins.html">详细介绍</a></p><h3 id="subscribeaction" tabindex="-1">subscribeAction <a class="header-anchor" href="#subscribeaction" aria-label="Permalink to &quot;subscribeAction&quot;">​</a></h3><ul><li><code>subscribeAction(handler: Function, options?: Object): Function</code></li></ul><p>订阅 store 的 action。<code>handler</code> 会在每个 action 分发的时候调用并接收 action 描述和当前的 store 的 state 这两个参数。 <code>subscribe</code> 方法将返回一个 <code>unsubscribe</code> 函数，当不再需要订阅时，应调用该函数。例如，当取消注册一个 Vuex 模块或销毁一个 Vue 组件之前。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unsubscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action.type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action.payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你可以调用 unsubscribe 来停止订阅。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>默认情况下，新的处理函数会被添加到其链的尾端，因此它会在其它之前已经被添加了的处理函数之后执行。这一行为可以通过向 <code>options</code> 添加 <code>prepend: true</code> 来覆写，即把处理函数添加到其链的最开始。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler, { prepend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p><code>subscribeAction</code> 方法将返回一个 <code>unsubscribe</code> 函数，当不再需要订阅时，应该调用该函数。例如，你可能会订阅一个 Vuex 模块，并在取消注册该模块时取消订阅。或者你可能从 Vue 组件内部调用<code>subscribeAction</code>，然后不久就会销毁该组件。在这些情况下，你应该记得手动取消订阅。</p><p><code>subscribeAction</code> 也可以指定订阅处理函数的被调用时机应该在一个 action 分发<em>之前</em>还是<em>之后</em> (默认行为是<em>之前</em>)：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`before action \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`after action \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>subscribeAction</code> 也可以指定一个 <code>error</code> 处理函数以捕获分发 action 的时候被抛出的错误。该函数会从第三个参数接收到一个 <code>error</code> 对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`error action \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>该 <code>subscribeAction</code> 方法常用于插件。<a href="./../guide/plugins.html">详细介绍</a></p><h3 id="registermodule" tabindex="-1">registerModule <a class="header-anchor" href="#registermodule" aria-label="Permalink to &quot;registerModule&quot;">​</a></h3><ul><li><code>registerModule(path: string | Array&lt;string&gt;, module: Module, options?: Object)</code></li></ul><p>注册一个动态模块。<a href="./../guide/modules.html#模块动态注册">详细介绍</a></p><p><code>options</code> 可以包含 <code>preserveState: true</code> 以允许保留之前的 state。用于服务端渲染。</p><h3 id="unregistermodule" tabindex="-1">unregisterModule <a class="header-anchor" href="#unregistermodule" aria-label="Permalink to &quot;unregisterModule&quot;">​</a></h3><ul><li><code>unregisterModule(path: string | Array&lt;string&gt;)</code></li></ul><p>卸载一个动态模块。<a href="./../guide/modules.html#模块动态注册">详细介绍</a></p><h3 id="hasmodule" tabindex="-1">hasModule <a class="header-anchor" href="#hasmodule" aria-label="Permalink to &quot;hasModule&quot;">​</a></h3><ul><li><p><code>hasModule(path: string | Array&lt;string&gt;): boolean</code></p><p>检查该模块的名字是否已经被注册。<a href="./../guide/modules.html#模块动态注册">详细介绍</a></p></li></ul><h3 id="hotupdate" tabindex="-1">hotUpdate <a class="header-anchor" href="#hotupdate" aria-label="Permalink to &quot;hotUpdate&quot;">​</a></h3><ul><li><code>hotUpdate(newOptions: Object)</code></li></ul><p>热替换新的 action 和 mutation。<a href="./../guide/hot-reload.html">详细介绍</a></p><h2 id="组件绑定的辅助函数" tabindex="-1">组件绑定的辅助函数 <a class="header-anchor" href="#组件绑定的辅助函数" aria-label="Permalink to &quot;组件绑定的辅助函数&quot;">​</a></h2><h3 id="mapstate" tabindex="-1">mapState <a class="header-anchor" href="#mapstate" aria-label="Permalink to &quot;mapState&quot;">​</a></h3><ul><li><code>mapState(namespace?: string, map: Array&lt;string&gt; | Object&lt;string | function&gt;): Object</code></li></ul><p>为组件创建计算属性以返回 Vuex store 中的状态。<a href="./../guide/state.html#mapstate-辅助函数">详细介绍</a></p><p>第一个参数是可选的，可以是一个命名空间字符串。<a href="./../guide/modules.html#带命名空间的绑定函数">详细介绍</a></p><p>对象形式的第二个参数的成员可以是一个函数。<code>function(state: any)</code></p><h3 id="mapgetters" tabindex="-1">mapGetters <a class="header-anchor" href="#mapgetters" aria-label="Permalink to &quot;mapGetters&quot;">​</a></h3><ul><li><code>mapGetters(namespace?: string, map: Array&lt;string&gt; | Object&lt;string&gt;): Object</code></li></ul><p>为组件创建计算属性以返回 getter 的返回值。<a href="./../guide/getters.html#mapgetters-辅助函数">详细介绍</a></p><p>第一个参数是可选的，可以是一个命名空间字符串。<a href="./../guide/modules.html#带命名空间的绑定函数">详细介绍</a></p><h3 id="mapactions" tabindex="-1">mapActions <a class="header-anchor" href="#mapactions" aria-label="Permalink to &quot;mapActions&quot;">​</a></h3><ul><li><code>mapActions(namespace?: string, map: Array&lt;string&gt; | Object&lt;string | function&gt;): Object</code></li></ul><p>创建组件方法分发 action。<a href="./../guide/actions.html#在组件中分发-action">详细介绍</a></p><p>第一个参数是可选的，可以是一个命名空间字符串。<a href="./../guide/modules.html#带命名空间的绑定函数">详细介绍</a></p><p>对象形式的第二个参数的成员可以是一个函数。<code>function(dispatch: function, ...args: any[])</code></p><h3 id="mapmutations" tabindex="-1">mapMutations <a class="header-anchor" href="#mapmutations" aria-label="Permalink to &quot;mapMutations&quot;">​</a></h3><ul><li><code>mapMutations(namespace?: string, map: Array&lt;string&gt; | Object&lt;string | function&gt;): Object</code></li></ul><p>创建组件方法提交 mutation。<a href="./../guide/mutations.html#在组件中提交-mutation">详细介绍</a></p><p>第一个参数是可选的，可以是一个命名空间字符串。<a href="./../guide/modules.html#带命名空间的绑定函数">详细介绍</a></p><p>对象形式的第二个参数的成员可以是一个函数。<code>function(commit: function, ...args: any[])</code></p><h3 id="createnamespacedhelpers" tabindex="-1">createNamespacedHelpers <a class="header-anchor" href="#createnamespacedhelpers" aria-label="Permalink to &quot;createNamespacedHelpers&quot;">​</a></h3><ul><li><p><code>createNamespacedHelpers(namespace: string): Object</code></p><p>创建基于命名空间的组件绑定辅助函数。其返回一个包含 <code>mapState</code>、<code>mapGetters</code>、<code>mapActions</code> 和 <code>mapMutations</code> 的对象。它们都已经绑定在了给定的命名空间上。<a href="./../guide/modules.html#带命名空间的绑定函数">详细介绍</a></p></li></ul><h2 id="组合式函数" tabindex="-1">组合式函数 <a class="header-anchor" href="#组合式函数" aria-label="Permalink to &quot;组合式函数&quot;">​</a></h2><h3 id="usestore" tabindex="-1">useStore <a class="header-anchor" href="#usestore" aria-label="Permalink to &quot;useStore&quot;">​</a></h3><ul><li><p><code>useStore&lt;S = any&gt;(injectKey?: InjectionKey&lt;Store&lt;S&gt;&gt; | string): Store&lt;S&gt;;</code></p><p>在 <code>setup</code> 钩子函数中调用该方法可以获取注入的 store。当使用组合式 API 时，可以通过调用该方法检索 store。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>TypeScript 用户可以使用 injection key 来检索已经定义了类型的 store。为了使其工作，在将 store 实例安装到 Vue 应用中时，必须定义 injection key 并将其与 store 一起传递给 Vue 应用。</p><p>首先，使用 Vue 的 <code>InjectionKey</code> 接口声明一个 injection key。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// store.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { InjectionKey } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore, Store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InjectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>然后，将定义好的 key 作为第二个参数传递给 <code>app.use</code> 方法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { store, key } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store, key)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>最后，将 key 传递给 <code>useStore</code> 方法以获取指定类型的 store 实例。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 vue 组件内</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { key } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    store.state.count </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类型为 number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,103)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
