import{_ as i,c as a,$ as n,o as p}from"./chunks/framework.BVElzs7h.js";const g=JSON.parse('{"title":"アプリケーションの構造","description":"","frontmatter":{},"headers":[],"relativePath":"ja/guide/structure.md","filePath":"ja/guide/structure.md"}'),t={name:"ja/guide/structure.md"};function l(h,s,e,k,r,F){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="アプリケーションの構造" tabindex="-1">アプリケーションの構造 <a class="header-anchor" href="#アプリケーションの構造" aria-label="Permalink to &quot;アプリケーションの構造&quot;">​</a></h1><p>Vuex は実際のところ、あなたがコードを構造化する方法を制限しません。もっと正確に言うと、それより高いレベルの原理原則を適用させます:</p><ol><li><p>アプリケーションレベルの状態はストアに集約されます。</p></li><li><p>状態を変更する唯一の方法は、同期的に処理を行う<strong>ミューテーション</strong>をコミットすることのみです。</p></li><li><p>非同期的なロジックはカプセル化されるべきであり、それは<strong>アクション</strong>によって構成されます。</p></li></ol><p>これらのルールに従っている限り、プロジェクトをどのように構造化するかはあなた次第です。もしストアファイルが大きくなり過ぎたら、単純にアクションやミューテーション、ゲッターをそれぞれ別のファイルに切り出すことができます。</p><p>それなりに手の込んだアプリケーションであれば、モジュールを活用する必要が出てきそうです。プロジェクトの構造の例は以下のようになります:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # API 呼び出しを抽象化する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> App.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # モジュールを集めてストアをエクスポートする</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> actions.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # アクションのルートファイル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mutations.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # ミューテーションのルートファイル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modules</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cart.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # cart モジュール</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> products.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # products モジュール</span></span></code></pre></div><p>参考として <a href="https://github.com/vuejs/vuex/tree/4.0/examples/classic/shopping-cart" target="_blank" rel="noreferrer">Shopping Cart Example</a> をみてみるのもよいでしょう。</p>`,7)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
