import{_ as i,c as a,$ as t,o as e}from"./chunks/framework.BVElzs7h.js";const o=JSON.parse('{"title":"厳格モード","description":"","frontmatter":{},"headers":[],"relativePath":"ja/guide/strict.md","filePath":"ja/guide/strict.md"}'),n={name:"ja/guide/strict.md"};function p(l,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="厳格モード" tabindex="-1">厳格モード <a class="header-anchor" href="#厳格モード" aria-label="Permalink to &quot;厳格モード&quot;">​</a></h1><p>厳格（strict）モードを有効にするには Vuex store を作成するときに、ただ <code>strict: true</code> を指定するだけです:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  strict: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>厳格モードでは Vuex の状態がミューテーションハンドラの外部で変更されたら、エラーを投げるようになります。これで全ての状態変更がデバッギングツールで明示的に追跡できることが保証されます。</p><h2 id="開発環境-vs-本番環境" tabindex="-1">開発環境 vs 本番環境 <a class="header-anchor" href="#開発環境-vs-本番環境" aria-label="Permalink to &quot;開発環境 vs 本番環境&quot;">​</a></h2><p><strong>本番環境で厳格モードを有効にしてデプロイしてはいけません！</strong> 厳格モードでは不適切なミューテーションを検出するためにステートツリーに対して深い監視を実行します。パフォーマンスコストを回避するために本番環境では無効にしてください。</p><p>プラグインと同様に、ビルドツールに処理させることができます:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  strict: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,8)]))}const g=i(n,[["render",p]]);export{o as __pageData,g as default};
