import{_ as i,c as a,$ as e,o as t}from"./chunks/framework.BVElzs7h.js";const c=JSON.parse('{"title":"从 3.x 迁移到 4.0","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/migrating-to-4-0-from-3-x.md","filePath":"zh/guide/migrating-to-4-0-from-3-x.md"}'),n={name:"zh/guide/migrating-to-4-0-from-3-x.md"};function l(p,s,h,k,r,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="从-3-x-迁移到-4-0" tabindex="-1">从 3.x 迁移到 4.0 <a class="header-anchor" href="#从-3-x-迁移到-4-0" aria-label="Permalink to &quot;从 3.x 迁移到 4.0&quot;">​</a></h1><p>几乎所有的 Vuex 4 API 都与 Vuex 3 保持不变。但是，仍有一些非兼容性变更需要注意。</p><ul><li><a href="#非兼容性变更">非兼容性变更</a><ul><li><a href="#安装过程">安装过程</a></li><li><a href="#TypeScript-支持">TypeScript 支持</a></li><li><a href="#打包产物已经与-Vue-3-配套">打包产物已经与 Vue 3 配套</a></li><li><a href="#“createLogger”函数从核心模块导出">“createLogger”函数从核心模块导出</a></li></ul></li><li><a href="#新特性">新特性</a><ul><li><a href="#全新的“usestore”组合式函数">全新的“useStore”组合式函数</a></li></ul></li></ul><h2 id="非兼容性变更" tabindex="-1">非兼容性变更 <a class="header-anchor" href="#非兼容性变更" aria-label="Permalink to &quot;非兼容性变更&quot;">​</a></h2><h3 id="安装过程" tabindex="-1">安装过程 <a class="header-anchor" href="#安装过程" aria-label="Permalink to &quot;安装过程&quot;">​</a></h3><p>为了与 Vue 3 初始化过程保持一致，Vuex 的安装方式已经改变了。用户现在应该使用新引入的 <code>createStore</code> 方法来创建 store 实例。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>要将 Vuex 安装到 Vue 实例中，需要用 <code>store</code> 替代之前的 Vuex 传递给 <code>use</code> 方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>从技术上讲这并不是一个非兼容性变更，仍然可以使用 <code>new Store(...)</code> 语法，但是建议使用上述方式以保持与 Vue 3 和 Vue Router Next 的一致。</p></div><h3 id="typescript-支持" tabindex="-1">TypeScript 支持 <a class="header-anchor" href="#typescript-支持" aria-label="Permalink to &quot;TypeScript 支持&quot;">​</a></h3><p>为了修复 <a href="https://github.com/vuejs/vuex/issues/994" target="_blank" rel="noreferrer">issue #994</a>，Vuex 4 删除了 <code>this.$store</code> 在 Vue 组件中的全局类型声明。当使用 TypeScript 时，必须声明自己的<a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation" target="_blank" rel="noreferrer">模块补充(module augmentation)</a>。</p><p>将下面的代码放到项目中，以允许 <code>this.$store</code> 能被正确的类型化：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vuex-shim.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ComponentCustomProperties } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明自己的 store state</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    $store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <a href="./typescript-support.html">TypeScript 支持</a>章节可以了解到更多。</p><h3 id="打包产物已经与-vue-3-配套" tabindex="-1">打包产物已经与 Vue 3 配套 <a class="header-anchor" href="#打包产物已经与-vue-3-配套" aria-label="Permalink to &quot;打包产物已经与 Vue 3 配套&quot;">​</a></h3><p>下面的打包产物分别与 Vue 3 的打包产物配套：</p><ul><li><code>vuex.global(.prod).js</code><ul><li>通过<code>&lt;script src=&quot;...&quot;&gt;</code> 标签直接用在浏览器中，将 Vuex 暴露为全局变量。</li><li>全局构建为 IIFE ， 而不是 UMD ，并且只能与 <code>&lt;script src=&quot;...&quot;&gt;</code> 一起使用。</li><li>包含硬编码的 prod/dev 分支，并且生产环境版本已经压缩过。生产环境请使用 <code>.prod.js</code> 文件。</li></ul></li><li><code>vuex.esm-browser(.prod).js</code><ul><li>用于通过原生 ES 模块导入使用(在浏览器中通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签使用)。</li></ul></li><li><code>vuex.esm-bundler.js</code><ul><li>用于与 <code>webpack</code>， <code>rollup</code>， <code>parcel</code> 等构建工具一起使用。</li><li>通过 <code>process.env.NODE_ENV</code> 环境变量决定应该运行在生产环境还是开发环境（必须由构建工具替换）。</li><li>不提供压缩后的构建版本(与打包后的其他代码一起压缩)</li></ul></li><li><code>vuex.cjs.js</code><ul><li>通过 <code>require</code> 在 Node.js 服务端渲染使用。</li></ul></li></ul><h3 id="createlogger-函数从核心模块导出" tabindex="-1">“createLogger”函数从核心模块导出 <a class="header-anchor" href="#createlogger-函数从核心模块导出" aria-label="Permalink to &quot;“createLogger”函数从核心模块导出&quot;">​</a></h3><p>在 Vuex 3 中，<code>createLogger</code> 方法从 <code>vuex/dist/logger</code> 文件中导出，但是现在该方法已经包含在核心包中了，应该直接从 <code>vuex</code> 包中引入。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createLogger } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span></code></pre></div><h2 id="新特性" tabindex="-1">新特性 <a class="header-anchor" href="#新特性" aria-label="Permalink to &quot;新特性&quot;">​</a></h2><h3 id="全新的-usestore-组合式函数" tabindex="-1">全新的“useStore”组合式函数 <a class="header-anchor" href="#全新的-usestore-组合式函数" aria-label="Permalink to &quot;全新的“useStore”组合式函数&quot;">​</a></h3><p>Vuex 4 引入了一个新的 API 用于在组合式 API 中与 store 进行交互。可以在组件的 <code>setup</code> 钩子函数中使用 <code>useStore</code> 组合式函数来检索 store。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在<a href="./composition-api.html">组合式 API</a> 章节可以了解到更多。</p>`,26)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
