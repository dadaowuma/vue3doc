import{_ as i,c as a,$ as e,o as t}from"./chunks/framework.BVElzs7h.js";const c=JSON.parse('{"title":"Migrating to 4.0 from 3.x","description":"","frontmatter":{},"headers":[],"relativePath":"guide/migrating-to-4-0-from-3-x.md","filePath":"guide/migrating-to-4-0-from-3-x.md"}'),n={name:"guide/migrating-to-4-0-from-3-x.md"};function l(p,s,h,o,r,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="migrating-to-4-0-from-3-x" tabindex="-1">Migrating to 4.0 from 3.x <a class="header-anchor" href="#migrating-to-4-0-from-3-x" aria-label="Permalink to &quot;Migrating to 4.0 from 3.x&quot;">​</a></h1><p>Almost all Vuex 4 APIs have remained unchanged from Vuex 3. However, there are still a few breaking changes that you must fix.</p><ul><li><a href="#breaking-changes">Breaking Changes</a><ul><li><a href="#installation-process">Installation process</a></li><li><a href="#typescript-support">TypeScript support</a></li><li><a href="#bundles-are-now-aligned-with-vue-3">Bundles are now aligned with Vue 3</a></li><li><a href="#createlogger-function-is-exported-from-the-core-module">&quot;createLogger&quot; function is exported from the core module</a></li></ul></li><li><a href="#new-features">New Features</a><ul><li><a href="#new-usestore-composition-function">New &quot;useStore&quot; composition function</a></li></ul></li></ul><h2 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">​</a></h2><h3 id="installation-process" tabindex="-1">Installation process <a class="header-anchor" href="#installation-process" aria-label="Permalink to &quot;Installation process&quot;">​</a></h3><p>To align with the new Vue 3 initialization process, the installation process of Vuex has changed. To create a new store, users are now encouraged to use the newly introduced createStore function.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>To install Vuex to a Vue instance, pass the <code>store</code> instead of Vuex.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Whilst this is not technically a breaking change, you may still use the <code>new Store(...)</code> syntax, we recommend this approach to align with Vue 3 and Vue Router Next.</p></div><h3 id="typescript-support" tabindex="-1">TypeScript support <a class="header-anchor" href="#typescript-support" aria-label="Permalink to &quot;TypeScript support&quot;">​</a></h3><p>Vuex 4 removes its global typings for <code>this.$store</code> within a Vue component to solve <a href="https://github.com/vuejs/vuex/issues/994" target="_blank" rel="noreferrer">issue #994</a>. When used with TypeScript, you must declare your own module augmentation.</p><p>Place the following code in your project to allow <code>this.$store</code> to be typed correctly:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vuex-shim.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ComponentCustomProperties } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Declare your own store states.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    $store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can learn more in the <a href="./typescript-support.html">TypeScript Support</a> section.</p><h3 id="bundles-are-now-aligned-with-vue-3" tabindex="-1">Bundles are now aligned with Vue 3 <a class="header-anchor" href="#bundles-are-now-aligned-with-vue-3" aria-label="Permalink to &quot;Bundles are now aligned with Vue 3&quot;">​</a></h3><p>The following bundles are generated to align with Vue 3 bundles:</p><ul><li><code>vuex.global(.prod).js</code><ul><li>For direct use with <code>&lt;script src=&quot;...&quot;&gt;</code> in the browser. Exposes the Vuex global.</li><li>Global build is built as IIFE, and not UMD, and is only meant for direct use with <code>&lt;script src=&quot;...&quot;&gt;</code>.</li><li>Contains hard-coded prod/dev branches and the prod build is pre-minified. Use the <code>.prod.js</code> files for production.</li></ul></li><li><code>vuex.esm-browser(.prod).js</code><ul><li>For use with native ES module imports (including module supporting browsers via <code>&lt;script type=&quot;module&quot;&gt;</code>.</li></ul></li><li><code>vuex.esm-bundler.js</code><ul><li>For use with bundlers such as <code>webpack</code>, <code>rollup</code> and <code>parcel</code>.</li><li>Leaves prod/dev branches with <code>process.env.NODE_ENV</code> guards (must be replaced by bundler).</li><li>Does not ship minified builds (to be done together with the rest of the code after bundling).</li></ul></li><li><code>vuex.cjs.js</code><ul><li>For use in Node.js server-side rendering with <code>require()</code>.</li></ul></li></ul><h3 id="createlogger-function-is-exported-from-the-core-module" tabindex="-1"><code>createLogger</code> function is exported from the core module <a class="header-anchor" href="#createlogger-function-is-exported-from-the-core-module" aria-label="Permalink to &quot;\`createLogger\` function is exported from the core module&quot;">​</a></h3><p>In Vuex 3, <code>createLogger</code> function was exported from <code>vuex/dist/logger</code> but it&#39;s now included in the core package. The function should be imported directly from the <code>vuex</code> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createLogger } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span></code></pre></div><h2 id="new-features" tabindex="-1">New Features <a class="header-anchor" href="#new-features" aria-label="Permalink to &quot;New Features&quot;">​</a></h2><h3 id="new-usestore-composition-function" tabindex="-1">New <code>useStore</code> composition function <a class="header-anchor" href="#new-usestore-composition-function" aria-label="Permalink to &quot;New \`useStore\` composition function&quot;">​</a></h3><p>Vuex 4 introduces a new API to interact with the store in Composition API. You can use the <code>useStore</code> composition function to retrieve the store within the component <code>setup</code> hook.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can learn more in the <a href="./composition-api.html">Composition API</a> section.</p>`,26)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
