import{_ as a,c as t,a2 as o,o as r}from"./chunks/framework.DoMDgatr.js";const u=JSON.parse('{"title":"Type Alias: _Method()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/type-aliases/Method.md","filePath":"api/pinia/type-aliases/Method.md"}'),n={name:"api/pinia/type-aliases/Method.md"};function s(i,e,p,d,c,l){return r(),t("div",null,e[0]||(e[0]=[o('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / _Method</p><h1 id="Type-Alias-Method-" tabindex="-1">Type Alias: _Method() <a class="header-anchor" href="#Type-Alias-Method-" aria-label="Permalink to &quot;Type Alias: \\_Method()&quot;">​</a></h1><blockquote><p><strong>_Method</strong>: (...<code>args</code>) =&gt; <code>any</code></p></blockquote><p>Generic type for a function that can infer arguments and return type</p><p>For internal use <strong>only</strong></p><h2 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• ...<strong>args</strong>: <code>any</code>[]</p><h2 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>any</code></p>',11)]))}const m=a(n,[["render",s]]);export{u as __pageData,m as default};
