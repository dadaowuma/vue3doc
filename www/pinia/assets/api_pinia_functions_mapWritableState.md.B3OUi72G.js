import{_ as a,c as t,a2 as o,o as r}from"./chunks/framework.DoMDgatr.js";const h=JSON.parse('{"title":"Function: mapWritableState()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/functions/mapWritableState.md","filePath":"api/pinia/functions/mapWritableState.md"}'),s={name:"api/pinia/functions/mapWritableState.md"};function d(c,e,n,p,i,m){return r(),t("div",null,e[0]||(e[0]=[o('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / mapWritableState</p><h1 id="Function-mapWritableState-" tabindex="-1">Function: mapWritableState() <a class="header-anchor" href="#Function-mapWritableState-" aria-label="Permalink to &quot;Function: mapWritableState()&quot;">​</a></h1><p>Allows using state and getters from one store without using the composition API (<code>setup()</code>) by generating an object to be spread in the <code>computed</code> field of a component.</p><h2 id="Param" tabindex="-1">Param <a class="header-anchor" href="#Param" aria-label="Permalink to &quot;Param&quot;">​</a></h2><p>store to map from</p><h2 id="Param-1" tabindex="-1">Param <a class="header-anchor" href="#Param-1" aria-label="Permalink to &quot;Param&quot;">​</a></h2><p>array or object</p><h2 id="mapWritableState-useStore-keyMapper-" tabindex="-1">mapWritableState(useStore, keyMapper) <a class="header-anchor" href="#mapWritableState-useStore-keyMapper-" aria-label="Permalink to &quot;mapWritableState(useStore, keyMapper)&quot;">​</a></h2><blockquote><p><strong>mapWritableState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;(<code>useStore</code>, <code>keyMapper</code>): <a href="./../type-aliases/MapWritableStateObjectReturn.html"><code>_MapWritableStateObjectReturn</code></a>&lt;<code>S</code>, <code>KeyMapper</code>&gt;</p></blockquote><p>Same as <code>mapState()</code> but creates computed setters as well so the state can be modified. Differently from <code>mapState()</code>, only <code>state</code> properties can be added.</p><h3 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong> <em>extends</em> <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</p><p>• <strong>A</strong></p><p>• <strong>KeyMapper</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, keyof <code>S</code>&gt;</p><h3 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>useStore</strong>: <a href="./../interfaces/StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>store to map from</p><p>• <strong>keyMapper</strong>: <code>KeyMapper</code></p><p>object of state properties</p><h3 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../type-aliases/MapWritableStateObjectReturn.html"><code>_MapWritableStateObjectReturn</code></a>&lt;<code>S</code>, <code>KeyMapper</code>&gt;</p><h3 id="Param-2" tabindex="-1">Param <a class="header-anchor" href="#Param-2" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>store to map from</p><h3 id="Param-3" tabindex="-1">Param <a class="header-anchor" href="#Param-3" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>array or object</p><h2 id="mapWritableState-useStore-keys-" tabindex="-1">mapWritableState(useStore, keys) <a class="header-anchor" href="#mapWritableState-useStore-keys-" aria-label="Permalink to &quot;mapWritableState(useStore, keys)&quot;">​</a></h2><blockquote><p><strong>mapWritableState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>Keys</code>&gt;(<code>useStore</code>, <code>keys</code>): <code>{ [K in Keys]: Object }</code></p></blockquote><p>Allows using state and getters from one store without using the composition API (<code>setup()</code>) by generating an object to be spread in the <code>computed</code> field of a component.</p><h3 id="Type-Parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong> <em>extends</em> <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</p><p>• <strong>A</strong></p><p>• <strong>Keys</strong> <em>extends</em> <code>string</code> | <code>number</code> | <code>symbol</code></p><h3 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>useStore</strong>: <a href="./../interfaces/StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>store to map from</p><p>• <strong>keys</strong>: readonly <code>Keys</code>[]</p><p>array of state properties</p><h3 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>{ [K in Keys]: Object }</code></p><h3 id="Param-4" tabindex="-1">Param <a class="header-anchor" href="#Param-4" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>store to map from</p><h3 id="Param-5" tabindex="-1">Param <a class="header-anchor" href="#Param-5" aria-label="Permalink to &quot;Param&quot;">​</a></h3><p>array or object</p>',49)]))}const u=a(s,[["render",d]]);export{h as __pageData,u as default};
