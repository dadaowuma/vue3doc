import{_ as a,c as t,a2 as r,o}from"./chunks/framework.DoMDgatr.js";const u=JSON.parse('{"title":"Interface: Pinia","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/interfaces/Pinia.md","filePath":"api/pinia/interfaces/Pinia.md"}'),i={name:"api/pinia/interfaces/Pinia.md"};function n(s,e,d,l,c,h){return o(),t("div",null,e[0]||(e[0]=[r('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / Pinia</p><h1 id="Interface-Pinia" tabindex="-1">Interface: Pinia <a class="header-anchor" href="#Interface-Pinia" aria-label="Permalink to &quot;Interface: Pinia&quot;">​</a></h1><p>Every application must own its own pinia to be able to create stores</p><h2 id="Extended-by" tabindex="-1">Extended by <a class="header-anchor" href="#Extended-by" aria-label="Permalink to &quot;Extended by&quot;">​</a></h2><ul><li><a href="./../../@pinia/testing/interfaces/TestingPinia.html"><code>TestingPinia</code></a></li></ul><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="install-" tabindex="-1">install() <a class="header-anchor" href="#install-" aria-label="Permalink to &quot;install()&quot;">​</a></h3><blockquote><p><strong>install</strong>: (<code>app</code>) =&gt; <code>void</code></p></blockquote><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>app</strong>: <code>App</code>&lt;<code>any</code>&gt;</p><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h3><blockquote><p><strong>state</strong>: <code>Ref</code>&lt;<code>Record</code>&lt;<code>string</code>, <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a>&gt;, <code>Record</code>&lt;<code>string</code>, <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a>&gt;&gt;</p></blockquote><p>root state</p><h2 id="Methods" tabindex="-1">Methods <a class="header-anchor" href="#Methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="use-" tabindex="-1">use() <a class="header-anchor" href="#use-" aria-label="Permalink to &quot;use()&quot;">​</a></h3><blockquote><p><strong>use</strong>(<code>plugin</code>): <a href="./Pinia.html"><code>Pinia</code></a></p></blockquote><p>Adds a store plugin to extend every store</p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>plugin</strong>: <a href="./PiniaPlugin.html"><code>PiniaPlugin</code></a></p><p>store plugin to add</p><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Pinia.html"><code>Pinia</code></a></p>',27)]))}const P=a(i,[["render",n]]);export{u as __pageData,P as default};
