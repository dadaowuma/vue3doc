import{_ as t,c as o,a2 as a,o as r}from"./chunks/framework.DoMDgatr.js";const h=JSON.parse('{"title":"Function: storeToRefs()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/functions/storeToRefs.md","filePath":"api/pinia/functions/storeToRefs.md"}'),s={name:"api/pinia/functions/storeToRefs.md"};function n(i,e,c,d,p,f){return r(),o("div",null,e[0]||(e[0]=[a('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / storeToRefs</p><h1 id="Function-storeToRefs-" tabindex="-1">Function: storeToRefs() <a class="header-anchor" href="#Function-storeToRefs-" aria-label="Permalink to &quot;Function: storeToRefs()&quot;">​</a></h1><blockquote><p><strong>storeToRefs</strong>&lt;<code>SS</code>&gt;(<code>store</code>): <code>StoreToRefs</code>&lt;<code>SS</code>&gt;</p></blockquote><p>Creates an object of references with all the state, getters, and plugin-added state properties of the store. Similar to <code>toRefs()</code> but specifically designed for Pinia stores so methods and non reactive properties are completely ignored.</p><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>SS</strong> <em>extends</em> <a href="./../type-aliases/StoreGeneric.html"><code>StoreGeneric</code></a></p><h2 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>store</strong>: <code>SS</code></p><p>store to extract the refs from</p><h2 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>StoreToRefs</code>&lt;<code>SS</code>&gt;</p>',13)]))}const u=t(s,[["render",n]]);export{h as __pageData,u as default};
