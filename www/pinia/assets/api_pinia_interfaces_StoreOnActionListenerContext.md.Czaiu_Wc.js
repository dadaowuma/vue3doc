import{_ as t,c as o,a2 as a,o as r}from"./chunks/framework.DoMDgatr.js";const m=JSON.parse('{"title":"Interface: _StoreOnActionListenerContext<Store, ActionName, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/interfaces/StoreOnActionListenerContext.md","filePath":"api/pinia/interfaces/StoreOnActionListenerContext.md"}'),n={name:"api/pinia/interfaces/StoreOnActionListenerContext.md"};function c(i,e,s,d,l,h){return r(),o("div",null,e[0]||(e[0]=[a('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / _StoreOnActionListenerContext</p><h1 id="Interface-StoreOnActionListenerContext-Store-ActionName-A-" tabindex="-1">Interface: _StoreOnActionListenerContext&lt;Store, ActionName, A&gt; <a class="header-anchor" href="#Interface-StoreOnActionListenerContext-Store-ActionName-A-" aria-label="Permalink to &quot;Interface: \\_StoreOnActionListenerContext\\&lt;Store, ActionName, A\\&gt;&quot;">​</a></h1><p>Actual type for <a href="./../type-aliases/StoreOnActionListenerContext.html">StoreOnActionListenerContext</a>. Exists for refactoring purposes. For internal use only. For internal use <strong>only</strong></p><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Store</strong></p><p>• <strong>ActionName</strong> <em>extends</em> <code>string</code></p><p>• <strong>A</strong></p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="after-" tabindex="-1">after() <a class="header-anchor" href="#after-" aria-label="Permalink to &quot;after()&quot;">​</a></h3><blockquote><p><strong>after</strong>: (<code>callback</code>) =&gt; <code>void</code></p></blockquote><p>Sets up a hook once the action is finished. It receives the return value of the action, if it&#39;s a Promise, it will be unwrapped.</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>callback</strong>: <code>A</code> <em>extends</em> <code>Record</code>&lt;<code>ActionName</code>, <a href="./../type-aliases/Method.html"><code>_Method</code></a>&gt; ? (<code>resolvedReturn</code>) =&gt; <code>void</code> : () =&gt; <code>void</code></p><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="args" tabindex="-1">args <a class="header-anchor" href="#args" aria-label="Permalink to &quot;args&quot;">​</a></h3><blockquote><p><strong>args</strong>: <code>A</code> <em>extends</em> <code>Record</code>&lt;<code>ActionName</code>, <a href="./../type-aliases/Method.html"><code>_Method</code></a>&gt; ? <code>Parameters</code>&lt;<code>A</code>&lt;<code>A</code>&gt;[<code>ActionName</code>]&gt; : <code>unknown</code>[]</p></blockquote><p>Parameters passed to the action</p><hr><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><blockquote><p><strong>name</strong>: <code>ActionName</code></p></blockquote><p>Name of the action</p><hr><h3 id="onError-" tabindex="-1">onError() <a class="header-anchor" href="#onError-" aria-label="Permalink to &quot;onError()&quot;">​</a></h3><blockquote><p><strong>onError</strong>: (<code>callback</code>) =&gt; <code>void</code></p></blockquote><p>Sets up a hook if the action fails. Return <code>false</code> to catch the error and stop it from propagating.</p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>callback</strong></p><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h3><blockquote><p><strong>store</strong>: <code>Store</code></p></blockquote><p>Store that is invoking the action</p>',37)]))}const u=t(n,[["render",c]]);export{m as __pageData,u as default};
