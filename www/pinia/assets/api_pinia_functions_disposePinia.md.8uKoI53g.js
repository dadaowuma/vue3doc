import{_ as a,c as e,a2 as n,o as t}from"./chunks/framework.DoMDgatr.js";const h=JSON.parse('{"title":"Function: disposePinia()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/functions/disposePinia.md","filePath":"api/pinia/functions/disposePinia.md"}'),s={name:"api/pinia/functions/disposePinia.md"};function o(r,i,p,c,d,u){return t(),e("div",null,i[0]||(i[0]=[n('<p><a href="./../../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../">API Documentation</a> / <a href="./../">pinia</a> / disposePinia</p><h1 id="Function-disposePinia-" tabindex="-1">Function: disposePinia() <a class="header-anchor" href="#Function-disposePinia-" aria-label="Permalink to &quot;Function: disposePinia()&quot;">​</a></h1><blockquote><p><strong>disposePinia</strong>(<code>pinia</code>): <code>void</code></p></blockquote><p>Dispose a Pinia instance by stopping its effectScope and removing the state, plugins and stores. This is mostly useful in tests, with both a testing pinia or a regular pinia and in applications that use multiple pinia instances. Once disposed, the pinia instance cannot be used anymore.</p><h2 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>pinia</strong>: <a href="./../interfaces/Pinia.html"><code>Pinia</code></a></p><p>pinia instance</p><h2 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p>',11)]))}const P=a(s,[["render",o]]);export{h as __pageData,P as default};
