import{_ as a,c as e,$ as i,o as t}from"./chunks/framework.BVElzs7h.js";const c=JSON.parse('{"title":"Referência da API","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"ptbr/api/index.md","filePath":"ptbr/api/index.md"}'),n={name:"ptbr/api/index.md"};function o(l,s,p,h,r,d){return t(),e("div",null,s[0]||(s[0]=[i(`<h1 id="referencia-da-api" tabindex="-1">Referência da API <a class="header-anchor" href="#referencia-da-api" aria-label="Permalink to &quot;Referência da API&quot;">​</a></h1><h2 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h2><h3 id="createstore" tabindex="-1">createStore <a class="header-anchor" href="#createstore" aria-label="Permalink to &quot;createStore&quot;">​</a></h3><ul><li><p><code>createStore&lt;S&gt;(options: StoreOptions&lt;S&gt;): Store&lt;S&gt;</code></p><p>Cria um novo <em>store</em>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options })</span></span></code></pre></div></li></ul><h2 id="opcoes-do-construtor-store" tabindex="-1">Opções do Construtor Store <a class="header-anchor" href="#opcoes-do-construtor-store" aria-label="Permalink to &quot;Opções do Construtor Store&quot;">​</a></h2><h3 id="state-estado" tabindex="-1">state (estado) <a class="header-anchor" href="#state-estado" aria-label="Permalink to &quot;state (estado)&quot;">​</a></h3><ul><li><p>type: <code>Object | Function</code></p><p>O objeto raiz de estado para o <em>store</em> Vuex. <a href="./../guide/state.html">Detalhes</a></p><p>Se você passar uma função que retorna um objeto, o objeto retornado é usado como o estado raiz. Isso é útil quando você deseja reutilizar o objeto de estado, especialmente para reutilização de módulos. <a href="./../guide/modules.html#reutilizacao-do-modulo">Detalhes</a></p></li></ul><h3 id="mutations-mutacoes" tabindex="-1">mutations (mutações) <a class="header-anchor" href="#mutations-mutacoes" aria-label="Permalink to &quot;mutations (mutações)&quot;">​</a></h3><ul><li><p>type: <code>{ [type: string]: Function }</code></p><p>Registra mutações no <em>store</em>. A função manipuladora (ou <em>handler</em>) sempre recebe <em>state</em> como o 1º argumento (será o estado local do módulo se definido em um módulo) e receberá um 2º argumento <em>payload</em> se houver um.</p><p><a href="./../guide/mutations.html">Detalhes</a></p></li></ul><h3 id="actions-acoes" tabindex="-1">actions (ações) <a class="header-anchor" href="#actions-acoes" aria-label="Permalink to &quot;actions (ações)&quot;">​</a></h3><ul><li><p>type: <code>{ [type: string]: Function }</code></p><p>Registra ações no <em>store</em>. A função manipuladora (ou <em>handler</em>) recebe um objeto <em>context</em> que expõe as seguintes propriedades:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o mesmo que \`store.state\`, ou estado local se estiver em módulos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rootState,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o mesmo que \`store.state\`, apenas em módulos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  commit,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o mesmo que \`store.commit\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dispatch,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o mesmo que \`store.dispatch\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o mesmo que \`store.getters\`, ou getters locais se estiver em módulos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rootGetters </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o mesmo que \`store.getters\`, apenas em módulos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>E também recebe um 2º argumento <em>payload</em> se houver um.</p><p><a href="./../guide/actions.html">Detalhes</a></p></li></ul><h3 id="getters" tabindex="-1">getters <a class="header-anchor" href="#getters" aria-label="Permalink to &quot;getters&quot;">​</a></h3><ul><li><p>type: <code>{ [key: string]: Function }</code></p><p>Registra os <em>getters</em> no <em>store</em>. A função <em>getter</em> recebe os seguintes argumentos:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>state,     // será estado local do módulo se definido em um módulo.</span></span>
<span class="line"><span>getters    // o mesmo que store.getters</span></span></code></pre></div><p>Especificamente quando definido em um módulo</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>state,       // será estado local do módulo se definido em um módulo.</span></span>
<span class="line"><span>getters,     // módulo de getters locais do módulo atual.</span></span>
<span class="line"><span>rootState,   // estado global</span></span>
<span class="line"><span>rootGetters  // todos os getters</span></span></code></pre></div><p>Os <em>getters</em> registrados estão expostos em <code>store.getters</code>.</p><p><a href="./../guide/getters.html">Detalhes</a></p></li></ul><h3 id="modules-modulos" tabindex="-1">modules (módulos) <a class="header-anchor" href="#modules-modulos" aria-label="Permalink to &quot;modules (módulos)&quot;">​</a></h3><ul><li><p>type: <code>Object</code></p><p>Um objeto contendo sub módulos a serem incorporados no <em>store</em>, de forma que:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    namespaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mutations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    getters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Cada módulo pode conter <em>state</em> e <em>mutations</em> semelhantes às opções raiz. O estado de um módulo será anexado ao estado da raiz do <em>store</em> usando a chave do módulo. As mutações e <em>getters</em> de um módulo receberão apenas o estado local do módulo como o 1º argumento em vez do estado da raiz, e as ações do módulo <em>context.state</em> também apontarão para o estado local.</p><p><a href="./../guide/modules.html">Detalhes</a></p></li></ul><h3 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h3><ul><li><p>type: <code>Array&lt;Function&gt;</code></p><p>Um <em>Array</em> de funções de plug-in a serem aplicadas no <em>store</em>. O plug-in simplesmente recebe o <em>store</em> como o único argumento e pode ouvir mutações (para persistência de dados de saída, registro ou depuração) ou despachar mutações (para dados de entrada, por exemplo, <em>websockets</em> ou <em>observables</em>).</p><p><a href="./../guide/plugins.html">Detalhes</a></p></li></ul><h3 id="strict" tabindex="-1">strict <a class="header-anchor" href="#strict" aria-label="Permalink to &quot;strict&quot;">​</a></h3><ul><li><p>type: <code>boolean</code></p></li><li><p>default: <code>false</code></p><p>Força o <em>store</em> Vuex a rodar mo modo estrito. No modo estrito, qualquer mutação ao estado do Vuex fora dos manipuladores de mutação acusará um erro.</p><p><a href="./../guide/strict.html">Detalhes</a></p></li></ul><h3 id="devtools" tabindex="-1">devtools <a class="header-anchor" href="#devtools" aria-label="Permalink to &quot;devtools&quot;">​</a></h3><ul><li><p>type: <code>boolean</code></p><p>Ative ou desative o <em>devtools</em> para uma determinada instância Vuex. Passar <code>false</code> à instância diz ao <em>store</em> Vuex para não se integrar ao <em>devtools</em>. Bem útil quando se tem vários <em>stores</em> em uma <em>single</em> <em>page</em>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  devtools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="propriedades-da-instancia-store" tabindex="-1">Propriedades da Instância Store <a class="header-anchor" href="#propriedades-da-instancia-store" aria-label="Permalink to &quot;Propriedades da Instância Store&quot;">​</a></h2><h3 id="state-estado-1" tabindex="-1">state (estado) <a class="header-anchor" href="#state-estado-1" aria-label="Permalink to &quot;state (estado)&quot;">​</a></h3><ul><li><p>type: <code>Object</code></p><p>O estado raiz. Apenas leitura.</p></li></ul><h3 id="getters-1" tabindex="-1">getters <a class="header-anchor" href="#getters-1" aria-label="Permalink to &quot;getters&quot;">​</a></h3><ul><li><p>type: <code>Object</code></p><p>Expõe os <em>getters</em> registrados. Apenas leitura.</p></li></ul><h2 id="metodos-da-instancia-store" tabindex="-1">Métodos da Instância Store <a class="header-anchor" href="#metodos-da-instancia-store" aria-label="Permalink to &quot;Métodos da Instância Store&quot;">​</a></h2><h3 id="commit" tabindex="-1">commit <a class="header-anchor" href="#commit" aria-label="Permalink to &quot;commit&quot;">​</a></h3><ul><li><code>commit(type: string, payload?: any, options?: Object)</code></li><li><code>commit(mutation: Object, options?: Object)</code></li></ul><p>Confirma (ou faz um <em>Commit</em> de) uma mutação. <em>options</em> pode ter <code>root: true</code> que permite confirmar mutações da raiz em <a href="./../guide/modules.html#namespacing">módulos namespaced</a>. <a href="./../guide/mutations.html">Detalhes</a></p><h3 id="dispatch" tabindex="-1">dispatch <a class="header-anchor" href="#dispatch" aria-label="Permalink to &quot;dispatch&quot;">​</a></h3><ul><li><code>dispatch(type: string, payload?: any, options?: Object): Promise&lt;any&gt;</code></li><li><code>dispatch(action: Object, options?: Object): Promise&lt;any&gt;</code></li></ul><p>Despacha uma ação. <em>options</em> pode ter <code>root: true</code> que permite despachar ações para raiz em <a href="./../guide/modules.html#namespacing">módulos namespaced</a>. Retorna um <em>Promise</em> que resolve todos os manipuladores de ação acionados. <a href="./../guide/actions.html">Detalhes</a></p><h3 id="replacestate" tabindex="-1">replaceState <a class="header-anchor" href="#replacestate" aria-label="Permalink to &quot;replaceState&quot;">​</a></h3><ul><li><code>replaceState(state: Object)</code></li></ul><p>Substitue o estado da raiz do <em>store</em>. Use isso apenas para fins de <em>hydration</em> / <em>time-travel</em>.</p><h3 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h3><ul><li><code>watch(fn: Function, callback: Function, options?: Object): Function</code></li></ul><p>Visualiza de forma reativa um valor de retorno de <code>fn</code>, e chama o <em>callback</em> para o retorno de chamada quando o valor for alterado. O <code>fn</code> recebe o estado do <em>store</em> como o 1º argumento, e os <em>getters</em> como o 2º argumento. Aceita um objeto de opções opcional que leva as mesmas opções que o <a href="https://vuejs.org/v2/api/#vm-watch" target="_blank" rel="noreferrer">método vm.$watch do Vue</a>.</p><p>Para parar um <em>watch</em>, chame a função <em>unwatch</em> retornada.</p><h3 id="subscribe" tabindex="-1">subscribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;subscribe&quot;">​</a></h3><ul><li><code>subscribe(handler: Function, options?: Object): Function</code></li></ul><p>Assinatura para as mutações do <em>store</em>. O <code>manipulador</code> é chamado após cada mutação e recebe o descritor da mutação e o estado pós-mutação como argumentos:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unsubscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mutation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mutation.type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mutation.payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// you may call unsubscribe to stop the subscription</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Por padrão, o novo manipulador é adicionado ao final da cadeia, então ele será executado após outros manipuladores que foram adicionados antes. Isso pode ser sobrescrito adicionando <code>prepend: true</code> a <em>options</em>, que irá adicionar o manipulador ao início da cadeia.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler, { prepend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>O método <em>subscribe</em> retornará uma função <em>unsubscribe</em>, que deve ser chamada quando a assinatura não for mais necessária. Por exemplo, você pode assinar um Módulo Vuex e cancelar a assinatura ao cancelar o registro do módulo. Ou você pode chamar <em>subscribe</em> de dentro de um componente Vue e então destruir o componente mais tarde. Nesses casos, você deve se lembrar de cancelar a assinatura manualmente.</p><p>Mais comumente usado em plugins. <a href="./../guide/plugins.html">Detalhes</a></p><h3 id="subscribeaction" tabindex="-1">subscribeAction <a class="header-anchor" href="#subscribeaction" aria-label="Permalink to &quot;subscribeAction&quot;">​</a></h3><ul><li><code>subscribeAction(handler: Function, options?: Object): Function</code></li></ul><p>Assinatura para as ações do <em>store</em>. O <code>manipulador</code> é chamado para cada ação despachada e recebe o descritor da ação e o estado de armazenamento atual como argumentos. O método <em>subscribe</em> retornará uma função <em>unsubscribe</em>, que deve ser chamada quando a assinatura não for mais necessária. Por exemplo, ao cancelar o registro de um módulo Vuex ou antes de destruir um componente Vue.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unsubscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action.type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action.payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// you may call unsubscribe to stop the subscription</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Por padrão, o novo manipulador é adicionado ao final da cadeia, então ele será executado após outros manipuladores que foram adicionados antes. Isso pode ser sobrescrito adicionando <code>prepend: true</code> a <em>options</em>, que irá adicionar o manipulador ao início da cadeia.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler, { prepend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>O método <em>subscribeAction</em> retornará uma função <em>unsubscribe</em>, que deve ser chamada quando a assinatura não for mais necessária. Por exemplo, você pode assinar um Módulo Vuex e cancelar a assinatura ao cancelar o registro do módulo. Ou você pode chamar <em>subscribeAction</em> de dentro de um componente Vue e então destruir o componente mais tarde. Nesses casos, você deve se lembrar de cancelar a assinatura manualmente.</p><p><em>subscribeAction</em> também pode especificar se a função manipuladora da assinatura deve ser chamada <em>antes</em> ou <em>depois</em> de um despacho de ação (o comportamento padrão é <em>antes</em>):</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`before action \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`after action \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><em>subscribeAction</em> também pode especificar uma função manipuladora <em>error</em> para capturar um erro lançado quando uma ação é despachada. A função receberá um objeto <em>error</em> como 3º argumento.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`error action \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>O método <em>subscribeAction</em> é mais comumente usado em plugins. <a href="./../guide/plugins.html">Detalhes</a></p><h3 id="registermodule" tabindex="-1">registerModule <a class="header-anchor" href="#registermodule" aria-label="Permalink to &quot;registerModule&quot;">​</a></h3><ul><li><code>registerModule(path: string | Array&lt;string&gt;, module: Module, options?: Object)</code></li></ul><p>Registra um módulo dinâmico. <a href="./../guide/modules.html#registro-de-modulo-dinamico">Detalhes</a></p><p><em>options</em> podem ter <code>preserveState: true</code> que permite preservar o estado anterior. Bem útil quando fazemos renderização do lado do servidor (<em>server-side-rendering</em>).</p><h3 id="unregistermodule" tabindex="-1">unregisterModule <a class="header-anchor" href="#unregistermodule" aria-label="Permalink to &quot;unregisterModule&quot;">​</a></h3><ul><li><code>unregisterModule(path: string | Array&lt;string&gt;)</code></li></ul><p>Cancela o registro de um módulo dinâmico. <a href="./../guide/modules.html#registro-de-modulo-dinamico">Detalhes</a></p><h3 id="hasmodule" tabindex="-1">hasModule <a class="header-anchor" href="#hasmodule" aria-label="Permalink to &quot;hasModule&quot;">​</a></h3><ul><li><p><code>hasModule(path: string | Array&lt;string&gt;): boolean</code></p><p>Verifica se o módulo com o nome fornecido já foi registrado. <a href="./../guide/modules.html#registro-de-modulo-dinamico">Detalhes</a></p></li></ul><h3 id="hotupdate" tabindex="-1">hotUpdate <a class="header-anchor" href="#hotupdate" aria-label="Permalink to &quot;hotUpdate&quot;">​</a></h3><ul><li><code>hotUpdate(newOptions: Object)</code></li></ul><p>Faz <em>hot</em> <em>swap</em> de novas ações e mutações <a href="./../guide/hot-reload.html">Detalhes</a></p><h2 id="metodos-auxiliares-de-vinculacao-aos-componentes" tabindex="-1">Métodos Auxiliares de Vinculação aos Componentes <a class="header-anchor" href="#metodos-auxiliares-de-vinculacao-aos-componentes" aria-label="Permalink to &quot;Métodos Auxiliares de Vinculação aos Componentes&quot;">​</a></h2><h3 id="mapstate" tabindex="-1">mapState <a class="header-anchor" href="#mapstate" aria-label="Permalink to &quot;mapState&quot;">​</a></h3><ul><li><code>mapState(namespace?: string, map: Array&lt;string&gt; | Object&lt;string | function&gt;): Object</code></li></ul><p>Cria dados computados do componente que retornam a subárvore do <em>store</em> Vuex. <a href="./../guide/state.html#o-auxiliar-mapstate">Detalhes</a></p><p>O 1º argumento pode ser opcionalmente uma <em>String</em> com <em>namespace</em>. <a href="./../guide/modules.html#vinculando-metodos-auxiliares-com-namespace">Detalhes</a></p><p>O segundo objeto que compõem os argumentos pode ser uma função. <code>function(state: any)</code></p><h3 id="mapgetters" tabindex="-1">mapGetters <a class="header-anchor" href="#mapgetters" aria-label="Permalink to &quot;mapGetters&quot;">​</a></h3><ul><li><code>mapGetters(namespace?: string, map: Array&lt;string&gt; | Object&lt;string&gt;): Object</code></li></ul><p>Cria dados computados do componente que retornam o valor calculado de um <em>getter</em>. <a href="./../guide/getters.html#o-auxiliar-mapgetters">Detalhes</a></p><p>O 1º argumento pode ser opcionalmente uma <em>String</em> com <em>namespace</em>. <a href="./../guide/modules.html#vinculando-metodos-auxiliares-com-namespace">Detalhes</a></p><h3 id="mapactions" tabindex="-1">mapActions <a class="header-anchor" href="#mapactions" aria-label="Permalink to &quot;mapActions&quot;">​</a></h3><ul><li><code>mapActions(namespace?: string, map: Array&lt;string&gt; | Object&lt;string | function&gt;): Object</code></li></ul><p>Cria opções de métodos nos componentes que despacham uma ação. <a href="./../guide/actions.html#despachando-acoes-em-componentes">Detalhes</a></p><p>O 1º argumento pode ser opcionalmente uma <em>String</em> com <em>namespace</em>. <a href="./../guide/modules.html#vinculando-metodos-auxiliares-com-namespace">Detalhes</a></p><p>O segundo objeto que compõem os argumentos pode ser uma função. <code>function(dispatch: function, ...args: any[])</code></p><h3 id="mapmutations" tabindex="-1">mapMutations <a class="header-anchor" href="#mapmutations" aria-label="Permalink to &quot;mapMutations&quot;">​</a></h3><ul><li><code>mapMutations(namespace?: string, map: Array&lt;string&gt; | Object&lt;string | function&gt;): Object</code></li></ul><p>Cria opções de métodos nos componentes que confirmam (ou fazem um <em>commit</em> de) uma mutação. <a href="./../guide/mutations.html#confirmando-ou-fazendo-commits-de-mutacoes-em-componentes">Detalhes</a></p><p>O 1º argumento pode ser opcionalmente uma <em>String</em> com <em>namespace</em>. <a href="./../guide/modules.html#vinculando-metodos-auxiliares-com-namespace">Detalhes</a></p><p>O segundo objeto que compõem os argumentos pode ser uma função. <code>function(commit: function, ...args: any[])</code></p><h3 id="createnamespacedhelpers" tabindex="-1">createNamespacedHelpers <a class="header-anchor" href="#createnamespacedhelpers" aria-label="Permalink to &quot;createNamespacedHelpers&quot;">​</a></h3><ul><li><code>createNamespacedHelpers(namespace: string): Object</code></li></ul><p>Cria métodos auxiliares de componentes vinculados por um nome. O objeto retornado conterá <code>mapState</code>, <code>mapGetters</code>, <code>mapActions</code> e <code>mapMutations</code>, que estão vinculados ao <em>namespace</em> fornecido. <a href="./../guide/modules.html#vinculando-metodos-auxiliares-com-namespace">Detalhes</a></p><h2 id="funcoes-de-composicao" tabindex="-1">Funções de Composição <a class="header-anchor" href="#funcoes-de-composicao" aria-label="Permalink to &quot;Funções de Composição&quot;">​</a></h2><h3 id="usestore" tabindex="-1">useStore <a class="header-anchor" href="#usestore" aria-label="Permalink to &quot;useStore&quot;">​</a></h3><ul><li><p><code>useStore&lt;S = any&gt;(injectKey?: InjectionKey&lt;Store&lt;S&gt;&gt; | string): Store&lt;S&gt;;</code></p><p>Busca o <em>store</em> injetado quando chamado dentro do gatilho (ou <em>hook</em>) <em>setup</em>. Ao usar a API de composição, você pode recuperar o <em>store</em> chamando este método.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Os usuários do TypeScript podem usar uma <em>injection</em> <em>key</em> para recuperar um <em>store</em> tipado. Para que isso funcione, você deve definir a <em>injection</em> <em>key</em> e passá-la junto com o <em>store</em> ao instalar a instância do <em>store</em> na aplicação Vue.</p><p>Primeiro, declare a <em>injection</em> <em>key</em> usando a interface <code>InjectionKey</code> do Vue.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// store.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { InjectionKey } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore, Store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InjectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Então, passe a <em>key</em> definida como o 2º argumento para o método <code>app.use</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { store, key } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store, key)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Finalmente, você pode passar a <em>key</em> para o método <em>useStore</em> para recuperar a instância tipada do <em>store</em>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// no componente vue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { key } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    store.state.count </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tipado como número</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,98)]))}const m=a(n,[["render",o]]);export{c as __pageData,m as default};
