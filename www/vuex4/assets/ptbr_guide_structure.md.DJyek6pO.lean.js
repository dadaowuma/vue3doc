import{_ as a,c as i,$ as e,o as n}from"./chunks/framework.BVElzs7h.js";const c=JSON.parse('{"title":"Estrutura da Aplicação","description":"","frontmatter":{},"headers":[],"relativePath":"ptbr/guide/structure.md","filePath":"ptbr/guide/structure.md"}'),t={name:"ptbr/guide/structure.md"};function p(l,s,r,h,o,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="estrutura-da-aplicacao" tabindex="-1">Estrutura da Aplicação <a class="header-anchor" href="#estrutura-da-aplicacao" aria-label="Permalink to &quot;Estrutura da Aplicação&quot;">​</a></h1><p>O Vuex não restringe realmente como você estrutura seu código. Em vez disso, ele impõe um conjunto de princípios de alto nível:</p><ol><li><p>O estado do nível da aplicação é centralizado no <em>store</em>.</p></li><li><p>A única maneira de mudar o estado é confirmando (ou fazendo <em>commit</em> das) <strong>mutações</strong>, que são transações síncronas.</p></li><li><p>A lógica assíncrona deve ser encapsulada e pode ser composta com <strong>ações</strong>.</p></li></ol><p>Enquanto você seguir estas regras, depende de você como estruturar seu projeto. Se o arquivo do seu <em>store</em> for muito grande, basta começar a dividir as ações, mutações e <em>getters</em> em arquivos separados.</p><p>Para qualquer aplicação mais complexa, provavelmente precisaremos aproveitar os módulos. Aqui está um exemplo de estrutura de projeto:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # abstrações para fazer requisições a API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> App.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # onde montamos os módulos e exportamos o store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> actions.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # ações raiz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mutations.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # mutações raiz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modules</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cart.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # módulo cart</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> products.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # módulo products</span></span></code></pre></div><p>Como referência, confira o <a href="https://github.com/vuejs/vuex/tree/4.0/examples/classic/shopping-cart" target="_blank" rel="noreferrer">Exemplo do Carrinho de Compras</a>.</p>`,7)]))}const F=a(t,[["render",p]]);export{c as __pageData,F as default};
