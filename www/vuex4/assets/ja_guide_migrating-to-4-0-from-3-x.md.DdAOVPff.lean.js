import{_ as i,c as a,$ as e,o as t}from"./chunks/framework.BVElzs7h.js";const c=JSON.parse('{"title":"3.x から 4.0 への移行","description":"","frontmatter":{},"headers":[],"relativePath":"ja/guide/migrating-to-4-0-from-3-x.md","filePath":"ja/guide/migrating-to-4-0-from-3-x.md"}'),n={name:"ja/guide/migrating-to-4-0-from-3-x.md"};function l(p,s,h,k,r,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_3-x-から-4-0-への移行" tabindex="-1">3.x から 4.0 への移行 <a class="header-anchor" href="#_3-x-から-4-0-への移行" aria-label="Permalink to &quot;3.x から 4.0 への移行&quot;">​</a></h1><p>ほとんどすべての Vuex 4 の API は、Vuex 3 から変更されていません。しかし、修正が必要な破壊的変更がいくつかあります。</p><ul><li><a href="#破壊的変更">破壊的変更</a><ul><li><a href="#インストール手順">インストール手順</a></li><li><a href="#typescript-サポート">TypeScript サポート</a></li><li><a href="#バンドルが-vue-3-に対応しました">バンドルが Vue 3 に対応しました</a></li><li><a href="#createlogger-関数はコアモジュールからエクスポートされます">&quot;createLogger&quot; 関数はコアモジュールからエクスポートされます</a></li></ul></li><li><a href="#新機能">新機能</a><ul><li><a href="#新しい-usestore-合成関数">新しい &quot;useStore&quot; 合成関数</a></li></ul></li></ul><h2 id="破壊的変更" tabindex="-1">破壊的変更 <a class="header-anchor" href="#破壊的変更" aria-label="Permalink to &quot;破壊的変更&quot;">​</a></h2><h3 id="インストール手順" tabindex="-1">インストール手順 <a class="header-anchor" href="#インストール手順" aria-label="Permalink to &quot;インストール手順&quot;">​</a></h3><p>新しい Vue 3 の初期化の手順に合わせて、Vuex のインストール手順が変更されました。新しいストアを作成するには、新しく導入された createStore 関数を使用することが推奨されます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>VueインスタンスにVuexをインストールするには、Vuexではなく<code>store</code>を渡します。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>厳密にはこれは破壊的変更ではなく、まだ <code>new Store(...)</code> 構文を使用することができますが、Vue 3 と Vue Router Next に合わせるためにこの方法を推奨します。</p></div><h3 id="typescript-サポート" tabindex="-1">TypeScript サポート <a class="header-anchor" href="#typescript-サポート" aria-label="Permalink to &quot;TypeScript サポート&quot;">​</a></h3><p>Vuex 4 は、<a href="https://github.com/vuejs/vuex/issues/994" target="_blank" rel="noreferrer">issue #994</a> を解決するために、Vue コンポーネント内の <code>this.$store</code> のグローバルな型付けを削除します。TypeScript で使用する場合は、独自のモジュール拡張を宣言する必要があります。</p><p>次のコードをあなたのプロジェクトに配置して、<code>this.$store</code> が正しく型付けされるようにしてください。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vuex-shim.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ComponentCustomProperties } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ストアのステートを宣言する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    $store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細は、<a href="./typescript-support.html">TypeScript サポート</a> セクションをご覧ください.</p><h3 id="バンドルが-vue-3-に対応しました" tabindex="-1">バンドルが Vue 3 に対応しました <a class="header-anchor" href="#バンドルが-vue-3-に対応しました" aria-label="Permalink to &quot;バンドルが Vue 3 に対応しました&quot;">​</a></h3><p>以下のバンドルは、Vue 3 のバンドルに合わせて生成されます。</p><ul><li><code>vuex.global(.prod).js</code><ul><li>ブラウザの <code>&lt;script src=&quot;...&quot;&gt;</code> で直接使用します。Vuexのグローバルを公開しています。</li><li>グローバルビルドは UMD ではなく IIFE としてビルドされており、<code>&lt;script src=&quot;...&quot;&gt;</code> での直接使用のみを想定しています。</li><li>ハードコードされた prod/dev ブランチが含まれており、prod ビルドはあらかじめ minify されています。本番環境では、<code>.prod.js</code> ファイルを使用してください。</li></ul></li><li><code>vuex.esm-browser(.prod).js</code><ul><li>ネイティブの ES モジュールのインポート（<code>&lt;script type=&quot;module&quot;&gt;</code> でブラウザをサポートするモジュールを含む）で使用されます。</li></ul></li><li><code>vuex.esm-bundler.js</code><ul><li><code>webpack</code>, <code>rollup</code>, <code>parcel</code> などのバンドラーで使用されます。</li><li><code>process.env.NODE_ENV</code> のガードを持つ prod/dev ブランチを残します(バンドラーで置き換える必要があります)。</li><li>minify されたビルドは出荷されません（バンドル後に他のコードと一緒に行われます）。</li></ul></li><li><code>vuex.cjs.js</code><ul><li>Node.js のサーバーサイドレンダリングで、<code>require()</code>を使って使用されます。</li></ul></li></ul><h3 id="createlogger-関数はコアモジュールからエクスポートされます" tabindex="-1">&quot;createLogger&quot; 関数はコアモジュールからエクスポートされます <a class="header-anchor" href="#createlogger-関数はコアモジュールからエクスポートされます" aria-label="Permalink to &quot;&quot;createLogger&quot; 関数はコアモジュールからエクスポートされます&quot;">​</a></h3><p>Vuex 3では、<code>createLogger</code> 関数は <code>vuex/dist/logger</code> からエクスポートされていましたが、現在は core パッケージに含まれています。この関数は <code>vuex</code> パッケージから直接インポートする必要があります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createLogger } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span></code></pre></div><h2 id="新機能" tabindex="-1">新機能 <a class="header-anchor" href="#新機能" aria-label="Permalink to &quot;新機能&quot;">​</a></h2><h3 id="新しい-usestore-合成関数" tabindex="-1">新しい &quot;useStore&quot; 合成関数 <a class="header-anchor" href="#新しい-usestore-合成関数" aria-label="Permalink to &quot;新しい &quot;useStore&quot; 合成関数&quot;">​</a></h3><p>Vuex 4 では、Composition API でストアを操作するための新しい API が導入されました。合成関数の <code>useStore</code> を使って、コンポーネントの <code>setup</code> フック内でストアを取得することができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細は、<a href="./composition-api.html">Composition API</a>のセクションをご覧ください。</p>`,26)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
